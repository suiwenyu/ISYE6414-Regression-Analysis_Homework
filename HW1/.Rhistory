knitr::opts_chunk$set(echo = TRUE)
# Create Three dataframes for three different treatments
Control_df <- data.frame(Phase_Shift = c(0.53, 0.36, 0.20, -0.37, -0.60, -0.64, -0.68, -1.27), Treatments = "Control")
Knees_df <- data.frame(Phase_Shift = c(0.73, 0.31, 0.03, -0.29, -0.56, -0.96, -1.61), Treatments = "Knees")
Eyes_df <- data.frame(Phase_Shift = c(-0.78, -0.86, -1.35, -1.48, -1.52, -2.04, -2.83), Treatments = "Eyes")
# merge the data into one dataframe
Jet_Lag <- rbind(Control_df, Knees_df, Eyes_df)
Jet_Lag$Treatments <-as.factor(Jet_Lag$Treatments)
Jet_Lag
# Create Three dataframes for three different treatments
Control_df <- data.frame(Phase_Shift = c(0.53, 0.36, 0.20, -0.37, -0.60, -0.64, -0.68, -1.27), Treatments = "Control")
Knees_df <- data.frame(Phase_Shift = c(0.73, 0.31, 0.03, -0.29, -0.56, -0.96, -1.61), Treatments = "Knees")
Eyes_df <- data.frame(Phase_Shift = c(-0.78, -0.86, -1.35, -1.48, -1.52, -2.04, -2.83), Treatments = "Eyes")
# merge the data into one dataframe
Jet_Lag <- rbind(Control_df, Knees_df, Eyes_df)
Jet_Lag$Treatments <-as.factor(Jet_Lag$Treatments)
Jet_Lag
aov_model1 = aov(Phase_Shift ~ Treatments, data=Jet_Lag)
summary(aov_model1)
# display the estimates of the mean of each Treatment group
model.tables(aov_model1, type = "means")
# Change work directory
setwd("E:/Data")
# Read in the data
data = read.csv("machine.csv", head = TRUE, sep = ",")
# Show the first few rows of data
head(data, 3)
# Your code here...
cor(data$chmax, data$performance)
# Your code here...
model1 = lm(performance ~ chmax, data)
# Your code here...
plot(data$chmax, data$performance, xlab = "Channels", ylab = "Performance")
# Your code here...
cor(data$chmax, data$performance)
# Your code here...
model1 = lm(performance ~ chmax, data)
# Your code here...
model1 = lm(performance ~ chmax, data)
summary(model)
# Your code here...
model1 = lm(performance ~ chmax, data)
summary(model1)
# Your code here...
#Create the model
model1 = lm(performance ~ chmax, data)
#show the results
summary(model1)
#print our the estimates of parameters
model1$coefficients
summary(model1)$sigma
# Your code here...
#Create the model
model1 = lm(performance ~ chmax, data)
#show the results
summary(model1)
#print our the estimates of parameters
model1$coefficients
summary(model1)$coefficients
# Your code here...
#Create the model
model1 = lm(performance ~ chmax, data)
#show the results
summary(model1)
#print our the estimates of parameters
summary(model1)$coefficients
summary(model1)$sigma
# Your code here...
#Create the model
model1 = lm(performance ~ chmax, data)
#show the results
summary(model1)
#print our the estimates of parameters
summary(model1)$coefficients
summary(model1)$sigma^2
confint(model1, level=0.95)
tvalue = 10.938
1- pt(tvalue, 207)
tvalue = 10.938
round(1- pt(tvalue, 207),5)
tvalue = 10.938
1- pt(tvalue, 23)
tvalue = 10.938089
1- pt(tvalue, 207)
tvalue = 10.938089
2*(1- pt(tvalue, 207))
tvalue = 10.938089
1- pt(tvalue, 207)
tvalue = 10.93808935464565465464
1- pt(tvalue, 207)
tvalue = 10.938089
tvalue = summary(model1)$coefficients['chmax','t value']
tvalue
1- pt(tvalue, 207)
tvalue = 10.938089
tvalue = summary(model1)$coefficients['chmax','t value']
tvalue
pt(t_test,df,lower=F)
tvalue = 10.938089
tvalue = summary(model1)$coefficients['chmax','t value']
tvalue
pt(tvalue,df,lower=F)
tvalue = 10.938089
tvalue = summary(model1)$coefficients['chmax','t value']
tvalue
pt(tvalue,df,lower=F)
tvalue = 10.938089
tvalue = summary(model1)$coefficients['chmax','t value']
tvalue
pt(tvalue,207,lower=F)
1- pt(tvalue, 207)
tvalue = 10.938089
1- pt(tvalue, 207)
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue = 10.938089
p_value = 1- pt(tvalue, 207)
p_value
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue = 10.938089
p_value = 1- pt(tvalue, 207)
round(p_value,100)
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue = 10.938089
p_value = 1- pt(tvalue, 207)
p_value
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue = 10.938089
p_value =  pt(tvalue, 207)
p_value
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue = 10.938089
p_value = 1- pt(tvalue, 207)
p_value
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue = 10.938089
p_value = 1- round(pt(tvalue, 207),100)
p_value
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue = 10.938089
p_value = 1- round(pt(tvalue, 207),20)
p_value
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue = 10.938089
p_value = 1- pt(tvalue, 207)
p_value
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue = 10.938089
p_value = 1- pt(tvalue, 20)
p_value
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue = 10.938089
p_value = 1- pt(tvalue, 207)
p_value
# Your code here...
plot(data$chmax, data$performance)
# Your code here...
plot(data$chmax, data$performance, xlab = "chmax", ylab = "performance")
# Your code here...
plot(model$fitted, model$residuals)
# Your code here...
plot(model1$fitted, model$residuals)
# Your code here...
plot(model1$fitted, model1$residuals)
# Your code here...
library(car);
hist(model1$residuals
qqPlot(model1$residuals
# Your code here...
library(car);
hist(model1$residuals)
qqPlot(model1$residuals)
# Your code here...
library(car);
hist(model1$residuals)
#qqPlot(model1$residuals)
# Your code here...
library(car);
#hist(model1$residuals)
qqPlot(model1$residuals)
# Your code here...
library(car);
hist(model1$residuals)
qqPlot(model1$residuals)
# Your code here...
library(car);
hist(model1$residuals,bins=15)
qqPlot(model1$residuals)
# Your code here...
library(car);
hist(model1$residuals)
qqPlot(model1$residuals)
# Your code here...
library(car);
hist(model1$residuals, breaks = 15)
qqPlot(model1$residuals)
# Your code here...
library(car);
hist(model1$residuals, breaks = 50)
qqPlot(model1$residuals)
# Your code here...
library(car);
hist(model1$residuals, breaks = 20)
qqPlot(model1$residuals)
# Your code here...
library(MASS)
bc <- boxcox(model1)
# Your code here...
library(MASS)
bc <- boxcox(model1)
lambda <- bc$x[which.max(bc$y)]
lambda
# Your code here...
model2 <- lm(log(performance) ~ log(chmax), data = data)
# Your code here...
model2 <- lm(log(performance) ~ log(chmax + 1), data = data)
summary(model2)
summary(model1)$r.squared
print("R squared of model 1:")
summary(model1)$r.squared
print("R squared of model 2:")
summary(model2)$r.squared
print("R squared of model 1:")
summary(model1)$r.squared
print("R squared of model 2:")
summary(model2)$r.squared
print("R squared of model 1:")
summary(model1)$r.squared
print("R squared of model 2:")
summary(model2)$r.squared
# Your code here...
plot(data$chmax, data$performance, xlab = "chmax", ylab = "performance")
plot(model1$fitted, model1$residuals)
hist(model1$residuals, breaks = 20)
qqPlot(model1$residuals)
# Your code here...
plot(log(data$chmax), log(data$performance), xlab = "log(chmax)", ylab = "log(performance)")
plot(model2$fitted, model2$residuals)
hist(model2$residuals, breaks = 20)
qqPlot(model2$residuals)
# Your code here...
plot(log(data$chmax), log(data$performance), xlab = "log(chmax)", ylab = "log(performance)")
plot(model2$fitted, model2$residuals)
hist(model2$residuals, breaks = 12)
qqPlot(model2$residuals)
# Your code here...
plot(log(data$chmax), log(data$performance), xlab = "log(chmax)", ylab = "log(performance)")
plot(model2$fitted, model2$residuals)
hist(model2$residuals, breaks = 13)
qqPlot(model2$residuals)
# Your code here...
plot(log(data$chmax), log(data$performance), xlab = "log(chmax)", ylab = "log(performance)")
plot(model2$fitted, model2$residuals)
hist(model2$residuals, breaks = 11)
qqPlot(model2$residuals)
# Your code here...
plot(log(data$chmax), log(data$performance), xlab = "log(chmax)", ylab = "log(performance)")
plot(model2$fitted, model2$residuals)
hist(model2$residuals, breaks = 15)
qqPlot(model2$residuals)
# Your code here...
plot(log(data$chmax), log(data$performance), xlab = "log(chmax)", ylab = "log(performance)")
plot(model2$fitted, model2$residuals)
hist(model2$residuals, breaks = 20)
qqPlot(model2$residuals)
# Your code here...
plot(log(data$chmax+1), log(data$performance), xlab = "log(chmax)", ylab = "log(performance)")
plot(model2$fitted, model2$residuals)
hist(model2$residuals, breaks = 20)
qqPlot(model2$residuals)
knitr::opts_chunk$set(echo = TRUE)
# Create Three dataframes for three different treatments
Control_df <- data.frame(Phase_Shift = c(0.53, 0.36, 0.20, -0.37, -0.60, -0.64, -0.68, -1.27), Treatments = "Control")
Knees_df <- data.frame(Phase_Shift = c(0.73, 0.31, 0.03, -0.29, -0.56, -0.96, -1.61), Treatments = "Knees")
Eyes_df <- data.frame(Phase_Shift = c(-0.78, -0.86, -1.35, -1.48, -1.52, -2.04, -2.83), Treatments = "Eyes")
# merge the data into one dataframe
Jet_Lag <- rbind(Control_df, Knees_df, Eyes_df)
Jet_Lag$Treatments <-as.factor(Jet_Lag$Treatments)
Jet_Lag
aov_model1 = aov(Phase_Shift ~ Treatments, data=Jet_Lag)
summary(aov_model1)
# display the estimates of the mean of each Treatment group
model.tables(aov_model1, type = "means")
# Change work directory
setwd("E:/Data")
# Read in the data
data = read.csv("machine.csv", head = TRUE, sep = ",")
# Show the first few rows of data
head(data, 3)
# Your code here...
plot(data$chmax, data$performance, xlab = "Channels", ylab = "Performance")
# Your code here...
cor(data$chmax, data$performance)
# Your code here...
#Create the model
model1 = lm(performance ~ chmax, data)
#show the results
summary(model1)
#print our the estimates of parameters
summary(model1)$coefficients
summary(model1)$sigma^2
confint(model1, level=0.95)
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue = 10.938089
p_value = 1- pt(tvalue, 207)
p_value
# Your code here...
plot(data$chmax, data$performance, xlab = "chmax", ylab = "performance")
# Your code here...
plot(model1$fitted, model1$residuals)
# Your code here...
library(car);
hist(model1$residuals, breaks = 20)
qqPlot(model1$residuals)
# Your code here...
library(MASS)
bc <- boxcox(model1)
# Find Optimal Lambda
lambda <- bc$x[which.max(bc$y)]
lambda
# Your code here...
model2 <- lm(log(performance) ~ log(chmax + 1), data = data)
summary(model2)
print("R squared of model 1:")
summary(model1)$r.squared
print("R squared of model 2:")
summary(model2)$r.squared
# Your code here...
plot(log(data$chmax+1), log(data$performance), xlab = "log(chmax)", ylab = "log(performance)")
plot(model2$fitted, model2$residuals)
hist(model2$residuals, breaks = 20)
qqPlot(model2$residuals)
# Your code here...
# Filter for honeywell, hp, and nas
data2 = data[data$vendor %in% c("honeywell", "hp", "nas"), ]
data2$vendor = factor(data2$vendor)
# Your code here...
# Your code here...
# Your code here...
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
summary(model1)$coefficients[2,3]
tvalue = 10.938089
p_value = 1- pt(tvalue, 207)
p_value
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue <- summary(model1)$coefficients[2,3]
#tvalue = 10.938089
p_value = 1- pt(tvalue, 207)
p_value
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue <- summary(model1)$coefficients[chmax,3]
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue <- summary(model1)$coefficients["chmax",3]
#tvalue = 10.938089
p_value = 1- pt(tvalue, 207)
p_value
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue <- summary(model1)$coefficients["chmax",3]
print("T value: ", tvalue)
p_value = 1- pt(tvalue, 207)
p_value
# run T test to see if beta 1 is statistically positive at an alpha level of 0.01
tvalue <- summary(model1)$coefficients["chmax",3]
print("T value: ")
print(tvalue)
print("P value: ")
p_value = 1- pt(tvalue, 207)
p_value
# Your code here...
newdata = data.frame(chmax = 128)
newdata
#make prediction using model1
predict(model1, newdata)
# Your code here...
#create new data frame for prediction
newdata = data.frame(chmax = 128)
newdata
#make prediction using model1
predict(model1, newdata)
# Your code here...
#create new data frame for prediction
newdata = data.frame(chmax = 128)
newdata
#make prediction using model1
predict(model1, newdata, interval = "prediction")
# Your code here...
#create new data frame for prediction
newdata = data.frame(chmax = 128)
newdata
#make prediction using model1
print("Model1: ")
predict(model1, newdata, interval = "prediction")
# Your code here...
#create new data frame for prediction
newdata = data.frame(chmax = 128)
newdata
#make prediction using model1
print("Model1: ")
predict(model1, newdata, interval = "prediction")
#make prediction using model2
print("Model2: ")
predict(model2, newdata, interval = "prediction")
# Your code here...
#create new data frame for prediction
newdata = data.frame(chmax = 128)
newdata
#make prediction using model1
print("Model1: ")
predict(model1, newdata, interval = "prediction")
#make prediction using model2
print("Model2: ")
exp(predict(model2, newdata, interval = "prediction"))
# Your code here...
#create new data frame for prediction
newdata = data.frame(chmax = 128)
newdata
#make prediction using model1
print("Model1: ")
predict(model1, newdata, interval = "prediction")
print("-------------------------------------------------------")
#make prediction using model2
print("Model2: ")
exp(predict(model2, newdata, interval = "prediction"))
# Filter for honeywell, hp, and nas
data2 = data[data$vendor %in% c("honeywell", "hp", "nas"), ]
data2$vendor = factor(data2$vendor)
# Your code here...
blxplot(performance ~ vendor, xlab = "vendor", ylab = "performance")
# Your code here...
boxplot(performance ~ vendor, xlab = "vendor", ylab = "performance")
# Your code here...
boxplot(performance ~ vendor, data = data2, xlab = "vendor", ylab = "performance")
# Your code here...
model <- aov(performance ~ vendor, data = data2)
# Your code here...
model <- aov(performance ~ vendor, data = data2)
summary(model)
# Your code here...
TukeyHSD(model)
